apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
apply plugin: "com.google.gms.google-services"

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

project.ext.react = [
    enableHermes: true,
    hermesCommandLineFlagsRelease: ["-O", "--strip-debug"]
]

react {
    entryFile = file("../../index.js")

    reactNativeDir = new File(["node", "--print", "require.resolve('react-native/package.json')"]
        .execute(null, rootDir).text.trim())
        .getParentFile()
        .getAbsoluteFile()

    hermesCommand = new File(["node", "--print", "require.resolve('react-native/package.json')"]
        .execute(null, rootDir).text.trim())
        .getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"

    codegenDir = new File(["node", "--print", "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"]
        .execute(null, rootDir).text.trim())
        .getParentFile()
        .getAbsoluteFile()

    autolinkLibrariesWithApp()
}

def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace 'com.ezehmark.BytApp'

    defaultConfig {
        applicationId 'com.ezehmark.BytApp'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0.0"
        resConfigs "en"
        // ❌ No ndk.abiFilters here — defined per buildType
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            minifyEnabled false
            shrinkResources false
            debuggable true

            // ✅ Force only arm64-v8a for debug
            ndk {
                abiFilters.clear()
                abiFilters.add("arm64-v8a")
            }
        }

        release {
            signingConfig signingConfigs.debug // Replace with real release config in production
            minifyEnabled true
            shrinkResources true
            crunchPngs true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"

            packagingOptions {
                jniLibs {
                    useLegacyPackaging false
                }
                exclude "**/libhermes-inspector.so"
                exclude "**/librnskia.so"
            }

            // ✅ Force only arm64-v8a for release
            ndk {
                abiFilters.clear()
                abiFilters.add("arm64-v8a")
            }
        }
    }

    androidResources {
        ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~'
    }
}

["pickFirsts", "excludes", "merges", "doNotStrip"].each { prop ->
    def options = (findProperty("android.packagingOptions.$prop") ?: "").split(",")
    for (i in 0..<options.size()) options[i] = options[i].trim()
    options -= ""
    if (options.length > 0) {
        println "android.packagingOptions.$prop += $options ($options.length)"
        options.each { android.packagingOptions[prop] += it }
    }
}

dependencies {
    implementation("com.facebook.react:react-android")
    implementation("com.facebook.react:hermes-android")

    // ✅ Firebase services
    implementation("com.google.firebase:firebase-messaging")
    implementation("com.google.firebase:firebase-firestore:24.10.3")

    // ✅ Optional WebP/GIF support
    def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true"
    def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true"
    def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true"

    if (isGifEnabled) {
        implementation("com.facebook.fresco:animated-gif:${reactAndroidLibs.versions.fresco.get()}")
    }
    if (isWebpEnabled) {
        implementation("com.facebook.fresco:webpsupport:${reactAndroidLibs.versions.fresco.get()}")
        if (isWebpAnimatedEnabled) {
            implementation("com.facebook.fresco:animated-webp:${reactAndroidLibs.versions.fresco.get()}")
        }
    }
}
